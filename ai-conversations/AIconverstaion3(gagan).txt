3. Improving the User Interface with AI Assistance

Question1: How can I create a simple menu-driven interface in Python to let users enter location, ask questions, or exit? 
Source: Chatgpt
Answer: Great! For a simple, user-friendly menu-driven interface in Python, using the pyinputplus package is a solid choice. It provides easy input validation and menu creation.

Basic Steps to Create the Menu:
Use pyinputplus.inputMenu() to present a numbered menu of choices.

Based on the user’s choice, call the appropriate function (e.g., enter location, ask a weather question, or exit).

Loop the menu until the user chooses to exit.

Example Code:

import pyinputplus as pyip

def enter_location():
    location = pyip.inputStr(prompt="Enter your location (city name): ")
    print(f"Location set to: {location}")
    return location

def ask_weather_question():
    question = pyip.inputStr(prompt="Ask your weather question: ")
    print(f"Processing question: {question}")
    # Here you would parse the question and generate response
    # For now, just echo
    return question

def main_menu():
    location = None
    while True:
        choice = pyip.inputMenu(['Enter Location', 'Ask Weather Question', 'Exit'], numbered=True)
        
        if choice == 'Enter Location':
            location = enter_location()
        elif choice == 'Ask Weather Question':
            if not location:
                print("Please enter your location first!")
            else:
                ask_weather_question()
        else:
            print("Goodbye!")
            break

if __name__ == "__main__":
    main_menu()

What this does:
> Shows a numbered menu.
> Lets users enter or update their location.
> Only lets users ask weather questions after setting location.
> Exits cleanly when chosen.






Question2: Can you provide example code for a menu with options: Enter Location, Ask Weather Question, Exit?
Source: Chatgpt
Answer: Sure! Here’s a clean, simple example of a menu using pyinputplus with the options you requested: Enter Location, Ask Weather Question, and Exit.

Python Code: 

import pyinputplus as pyip

def enter_location():
    location = pyip.inputStr(prompt="Enter your location (city name): ")
    print(f"Location set to: {location}")
    return location

def ask_weather_question(location):
    question = pyip.inputStr(prompt="Ask your weather question: ")
    print(f"You asked: '{question}' for location: {location}")
    # Here you would call parsing and response functions
    # For now, just echo
    return question

def main_menu():
    location = None
    while True:
        choice = pyip.inputMenu(['Enter Location', 'Ask Weather Question', 'Exit'], numbered=True)
        
        if choice == 'Enter Location':
            location = enter_location()
        elif choice == 'Ask Weather Question':
            if not location:
                print("Please enter your location first!")
            else:
                ask_weather_question(location)
        else:
            print("Exiting program. Goodbye!")
            break

if __name__ == "__main__":
    main_menu()

How it works:
> The menu loops until the user selects Exit.
> You must enter a location before asking questions.
> The ask_weather_question function takes the current location as input.

You can expand the ask_weather_question function to integrate your parsing and weather data fetching code.






Question3: How do I ensure the user can't ask a question before entering a location?
Source: Chatgpt
Answer: To ensure the user can’t ask a weather question before entering a location, you need to:

Track whether a location has been set.

Check that the location is not None or empty before allowing the user to proceed to ask a question.

This is a common logic gate used in menu-driven programs.

✅ Here's the exact way to do it:

import pyinputplus as pyip

def enter_location():
    location = pyip.inputStr(prompt="Enter your location (city name): ")
    print(f"Location set to: {location}")
    return location

def ask_weather_question(location):
    question = pyip.inputStr(prompt="Ask your weather question: ")
    print(f"You asked: '{question}' for location: {location}")
    # You can parse and fetch weather data here
    return question

def main_menu():
    location = None  # Track if user has entered a location

    while True:
        choice = pyip.inputMenu(['Enter Location', 'Ask Weather Question', 'Exit'], numbered=True)
        
        if choice == 'Enter Location':
            location = enter_location()
        
        elif choice == 'Ask Weather Question':
            if not location:
                print("⚠️ Please enter your location first!")
            else:
                ask_weather_question(location)
        
        else:  # Exit
            print("Goodbye!")
            break

if __name__ == "__main__":
    main_menu()

✅Why this works:
> The location variable starts as None.
> Until it's updated via enter_location(), the program will block access to weather questions and show a warning.
> Once set, the location is reused until changed or program exits.
